[main]
#debug: default = False
#flood the console with irrelevant crap
debug = True

#silent: default = False
#will hide most of console output (like hooks)
#resulting in HUGE performance boost
silent = False

#machine_id_filename: default = machine_id.conf
#file containing auto-generated UUID of machine
machine_id_filename = machine_id.conf

#tag: default = unspecified
#tag might be used to associate specific threat with workstation
tag = unspecified

[multiprocessing]
#workers_num: default = 1
#define number of workers processing queue events
#minimal value is 1 - this will spawn 1 worker and 1 main therad
workers_num = 2

#queue_size: default = 20480
#size of multiprocessing event queue
queue_size = 20480

[debugger]
#antianti: default = False
#run debugger in hostile mode (see winappdbg hostile for more info)
#this function is highly experimental and results in various bugs.
antianti = False

[hooks]
#modules: default = kernel32.dll wininet.dll user32.dll advapi32.dll crypt32.dll dnsapi.dll ole32.dll ws2_32.dll shlwapi.dll shell32.dll nss3.dll winhttp.dll
#define a space separated modules to hook
modules = kernel32.dll wininet.dll user32.dll advapi32.dll crypt32.dll dnsapi.dll ole32.dll ws2_32.dll shlwapi.dll shell32.dll nss3.dll winhttp.dll

[libmagic]
#works only with on x86, unless you are able to compile libmagic for x64

#enabled: default = True
#you might disable libmagic here.
enabled = True

#magic_file: default = magic
#path/filename of magic file (containing filetypes definition)
#the file is provided with libmagic library
magic_file = magic

#default_extension: default = .dmp
#extension of not properly detected filetypes
default_extension = .dmp

#buf_limit: default = 1024
#filetype discovery buffer (stream) limit 
buf_limit = 1024

[console]
#show_create_thread: default = True
#write console output on new thread creation
show_create_thread = True

#log_level: default = INFO
#set console logging level
#valid values are: DEBUG INFO WARN ERROR CRITICAL
#consult python's logging module decumentation for more info.
log_level = INFO

#log_format: default = %(asctime)s %(name)s %(levelname)s: %(message)s
#set logging framework format
#consult python's logging module decumentation for more info.
log_format = %(asctime)s %(name)s %(levelname)s: %(message)s

#buffer_limit: default = 1024
#limit console (stdout) message length
buffer_limit = 1024

[logging]
#log_dir: default = malyzer-log
#default logging path - might be relative or absolute
log_dir = malyzer-log

#log_hooks_to_file: default = True
#enable logging every hook to separate files
log_hooks_to_file = True

#enable_filedump: default = True
#dump some blobs to dump_dir
enable_filedump = True

#dump_dir: default = dump
#place to put filedumps (log_dir is prepended so use relative path)
dump_dir = dump

#dump_index_filename: default = _index.txt
#filename of file dump index (every dumped file will be indexed there)
dump_index_filename = _index.txt

#sql_log: default = False
#create and write info to importable log.sql
#database connection doesn't need to be set up.
sql_log = True

#log_db: default = (empty)
#log debugee activity to DB
#examples:
# sqlite:///:memory: - will log to sqlite3 memory (possibly useless)
# sqlite:///filename.db
# mysql://user:password@host/dbname
# pgsql://user:password@host/dbname
# consult https://dataset.readthedocs.org/en/latest/quickstart.html#connecting-to-a-database
# for details.
#log_db = sqlite:///malyzer.db


#make_summary: default = True
#will show and write to log file a nice summary of analysis
make_summary = True

#strft_fmt: default = %y-%m-%d %H:%M:%S
#time string format
strft_fmt = %y-%m-%d %H:%M:%S

#ts_fmt: default = %y%m%d_%H%M%S
#timestamp format - used in dumps naming scheme
ts_fmt = %y%m%d_%H%M%S
